//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _01.EntityFramework
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.SqlClient;
    
    public partial class NorthwindEntities : DbContext
    {
        private string spName = "usp_FindTotalIncome";

        public NorthwindEntities()
            : base("name=NorthwindEntities")
        {         
            this.CreateStoredProcedures();
        }

        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<CustomerDemographic> CustomerDemographics { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Order_Detail> Order_Details { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Shipper> Shippers { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Territory> Territories { get; set; }

        public decimal GetTotalIncome(DateTime startYear, DateTime endYear, string companyName)
        {
            SqlParameter startYearParam = new SqlParameter("@startYear", startYear);
            SqlParameter endYearParam = new SqlParameter("@endYear", endYear);
            SqlParameter name = new SqlParameter("@companyName", companyName);

            var income = this.Database.ExecuteSqlCommand( this.spName + " @startYear, @endYear, @companyName", startYearParam, endYearParam, name);
            return income;
        }

        private void CreateStoredProcedures()
        {
            try
            {
                this.Database.ExecuteSqlCommand("CREATE PROCEDURE " + this.spName +
                "@companyName nvarchar(60), @startDate date, @endDate date AS " +
                "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity) AS Income " +
                "FROM Suppliers s " +
                "JOIN Products p " +
                "ON s.SupplierID = p.SupplierID " +
                "JOIN [Order Details] od " +
                "ON p.ProductID = od.ProductID " +
                "JOIN Orders o " +
                "ON od.OrderID = o.OrderID " +
                "where o.ShippedDate > @startDate AND o.ShippedDate < @endDate " +
                "AND s.CompanyName = @companyName " +
                "GROUP BY s.CompanyName");           
            }
            catch (Exception)
            {
                //procedure already exists
            }         
        }
    }
}
